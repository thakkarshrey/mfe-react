--> Want to deploy each microfrontend independently (including the container)
--> Location of child app remoteEntry.js files must be known at the build time.
--> Many frontend deployment solutions assume you're deploying a single project - we need something that can handle multiple different ones.
--> Need a CI/CD pipeline of some sort
--> At present, the remoteEntry.js file name is fixed. Need to think about caching issues.



--> We will be creating a monorepo on github. It is not necessary to create a monorepo. We can even create seperate repositories for all the projects.
--> Considering there are teams for all the projects; github will check if the code inside the container has changed then it will start the build process which is a part of CI and once the build is generated and checked then we will be deploying it to Amazon S3.

--> And when a user visits the url of our website then instead of serving the user directly through the S3 bucket; we will use a CDN (Content Delivery Network). Amazon CloudFront as a mediator. 

--> Suppose a user visits 'app.com'. The CDN will send a request to S3 and it will look for the index.html of parent app. It will return index.html through the CDN. Now the browser will parse index.html file and it will encounter a script tag which contains main.js file. Javascript will read the main.js file and it will have the imports for the remote file so it will then fetch remoteEntry.js file of marketing app which will then fetch main.js file of marketing app.




WORKFLOW:

Whenever code is pushed to the master branch and 
this commit contains a change to the 'container' folder 
               |                               ___
Change into the container folder                  |
               |                                  |
Install dependencies                              |
               |                                  |---> Commands executed in a virtual machine hosted by github
Create a production build using webpack           |
               |                                  |
Upload the result to AWS S3 bucket             ___|



You can create a workflow file from the github actions itself by going into the Actions tab inside github. You can create your server based on your requirement and based on your project. For example : Creating a Nodejs server.

You can manually write it inside your github repository by following steps.

Create .github folder in your root directory --> Create workflows folder inside it --> Create a container.yml file.
Events:- There are certain events on which we can trigger the workflows.
push, pull_request, Every 15 mins etc...

yml files are written with certain indentation method. Refer the container.yml file to learn about the workflow.

After writing the yml file for CI CD pipeline; we will need to setup the S3 bucket of AWS.

Go to AWS and S3 section and create a bucket. By default S3 bucket access is not public so you need to make it public by going into the Properties and Permissions section.

Now we will create an AWS policy.
A policy is what allows multiple services on AWS to talk to each other and access different features inside of them.

In this case we are creating a policy that will allow CloudFront Distribution Network to access all the files that we will be loading them into S3 bucket.